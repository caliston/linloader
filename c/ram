/*
 Linloader, Boots Linux/ARM on RISC OS based systems.
 Copyright (C) 1999  Timothy Baldwin

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/* $Id: ram.c,v 1.4 1999/07/20 15:01:57 uid1 Exp $ */

#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include "os.h"
#include "internal.h"

unsigned lll_rpc_vram_pages, lll_rpc_bank1_pages, lll_rpc_bank2_pages, lll_pages;
struct da_handler_control lll_da_ctrl;

static unsigned find_ram(unsigned s, unsigned l) {
  unsigned p1, p2, i = s;
  p2 = lll_da_ctrl.page_to_physical[s];
  do {
    p1 = p2;
    i++;
    l--;
    p2 = lll_da_ctrl.page_to_physical[i];
  } while(l && p2 == p1 + PAGE_SIZE);
  return i - s;
}

void lll_check_ram(void) {
  int page_size;
  unsigned i, j = 0;
  size_t arrangement_table_size  = osmemory_read_arrangement_table_size(&page_size);
  assert(page_size == PAGE_SIZE);
  if (lll_da_ctrl.page_to_physical) return;
  if (!lll_da_ctrl.arrangement_table) lll_da_ctrl.arrangement_table = lll_xmalloc(arrangement_table_size);
  osmemory_read_arrangement_table(lll_da_ctrl.arrangement_table);
  osmemory_read_size(osmemory_TYPE_DRAM << osmemory_TYPE_SHIFT, (int *)&lll_pages, (int *)&page_size);
  assert(page_size == PAGE_SIZE);
  assert(lll_pages != 0);
  osmemory_read_size(osmemory_TYPE_VRAM << osmemory_TYPE_SHIFT, (int *)&lll_rpc_vram_pages, (int *)&page_size);
  assert(page_size == PAGE_SIZE);
  lll_da_ctrl.page_to_physical = lll_xmalloc((lll_pages + 1) * 4);
  for(i = 0; i < arrangement_table_size && j <= lll_pages; i++) {
    if ((lll_da_ctrl.arrangement_table[i] & 0x07) == 0x01) lll_da_ctrl.page_to_physical[j++] = i * 2 * PAGE_SIZE;
    if ((lll_da_ctrl.arrangement_table[i] & 0x70) == 0x10) lll_da_ctrl.page_to_physical[j++] = (i * 2 + 1) * PAGE_SIZE;
  }
  assert(j == lll_pages);
  lll_rpc_bank1_pages = find_ram(0, 0x10000);
  lll_rpc_bank2_pages = find_ram(lll_rpc_bank1_pages, 0x10000);
}
